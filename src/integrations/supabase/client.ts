// This file is automatically generated. Do not edit it directly.
import { createClient } from "@supabase/supabase-js";
import type { Database } from "./types";

const SUPABASE_URL =
  (typeof Deno !== "undefined"
    ? Deno.env.get("SUPABASE_URL")
    : typeof process !== "undefined"
    ? process.env.SUPABASE_URL
    : import.meta.env?.VITE_SUPABASE_URL) || "";
const SUPABASE_KEY =
  (typeof Deno !== "undefined"
    ? Deno.env.get("SUPABASE_ANON_KEY")
    : typeof process !== "undefined"
    ? process.env.SUPABASE_ANON_KEY
    : import.meta.env?.VITE_SUPABASE_KEY) || "";

if (!SUPABASE_URL || !SUPABASE_KEY) {
  throw new Error(
    "Missing Supabase configuration",
  );
}

function decodeJwtPayload(token: string) {
  try {
    const payload = token.split(".")[1].replace(/-/g, "+").replace(/_/g, "/");
    const json = typeof atob === "function"
      ? atob(payload)
      : Buffer.from(payload, "base64").toString("utf8");
    return JSON.parse(json) as { [k: string]: unknown };
  } catch {
    return null;
  }
}

const payload = decodeJwtPayload(SUPABASE_KEY);
if (payload && payload["role"] && payload["role"] !== "anon") {
  throw new Error("Supabase key must be an anon key");
}

const queryCounts: Record<string, number> = {};

const loggingFetch: typeof fetch = async (input, init) => {
  const start = Date.now();
  const res = await fetch(input as RequestInfo, init);
  const end = Date.now();
  try {
    const url = typeof input === "string" ? input : input.url;
    const path = new URL(url).pathname;
    queryCounts[path] = (queryCounts[path] || 0) + 1;
    console.log(`[Supabase] ${path} - ${res.status} - ${end - start}ms`);
  } catch {
    // ignore logging errors
  }
  return res;
};

export function getQueryCounts() {
  return { ...queryCounts };
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL,
  SUPABASE_KEY,
  {
    auth: {
      storage: {
        getItem: () => null,
        setItem: () => {},
        removeItem: () => {},
      },
      persistSession: false,
      autoRefreshToken: true,
    },
    global: {
      fetch: loggingFetch,
    },
  },
);
