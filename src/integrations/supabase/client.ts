// This file is automatically generated. Do not edit it directly.
import { createClient, type SupabaseClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
const isConfigured = !!SUPABASE_URL && !!SUPABASE_PUBLISHABLE_KEY;

if (!isConfigured) {
  console.warn('Missing Supabase environment variables. Using stub client.');
}

// When building in a non-browser environment (e.g. during SSR or in tests),
// `localStorage` will not be defined. Guard access so bundling doesn't crash.
const isBrowser = typeof window !== "undefined" && typeof window.localStorage !== "undefined";
const storage: Storage | undefined = isBrowser
  ? window.localStorage
  : {
      getItem: () => null,
      setItem: () => {},
      removeItem: () => {},
    } as unknown as Storage;

function createStub() {
  const handler: ProxyHandler<any> = {
    get(_target, prop) {
      if (prop === 'auth') {
        return {
          getSession: async () => ({ data: null, error: { message: 'Supabase not configured' } }),
          onAuthStateChange: () => ({
            data: { session: null },
            error: { message: 'Supabase not configured' },
            subscription: { unsubscribe() {} },
          }),
        };
      }
      return () => Promise.resolve({ data: null, error: { message: 'Supabase not configured' } });
    },
  };
  return new Proxy({}, handler);
}

export const supabase: SupabaseClient<Database> = isConfigured
  ? createClient<Database>(SUPABASE_URL!, SUPABASE_PUBLISHABLE_KEY!, {
      auth: {
        storage,
        // Only persist sessions in environments where storage is available
        persistSession: isBrowser,
        autoRefreshToken: true,
      }
    })
  : (createStub() as unknown as SupabaseClient<Database>);
