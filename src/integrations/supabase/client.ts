// This file is automatically generated. Do not edit it directly.
import { createClient } from "@supabase/supabase-js";
import type { Database } from "./types";
import { SUPABASE_CONFIG } from "@/config/supabase";

const SUPABASE_URL = SUPABASE_CONFIG.URL;
const SUPABASE_KEY = SUPABASE_CONFIG.ANON_KEY;

function decodeJwtPayload(token: string) {
  try {
    const payload = token.split(".")[1].replace(/-/g, "+").replace(/_/g, "/");
    const json = typeof atob === "function"
      ? atob(payload)
      : Buffer.from(payload, "base64").toString("utf8");
    return JSON.parse(json) as { [k: string]: unknown };
  } catch {
    return null;
  }
}

const queryCounts: Record<string, number> = {};

const loggingFetch: typeof fetch = async (input, init) => {
  const start = Date.now();
  const res = await fetch(input as RequestInfo, init);
  const end = Date.now();
  try {
    const url = typeof input === "string" ? input : input.url;
    const path = new URL(url).pathname;
    queryCounts[path] = (queryCounts[path] || 0) + 1;
    console.log(`[Supabase] ${path} - ${res.status} - ${end - start}ms`);
  } catch {
    // ignore logging errors
  }
  return res;
};

export function getQueryCounts() {
  return { ...queryCounts };
}

function createSupabaseClient() {
  if (!SUPABASE_URL || !SUPABASE_KEY) {
    console.error("Supabase config debug:", {
      SUPABASE_URL: SUPABASE_URL ? "present" : "missing",
      SUPABASE_KEY: SUPABASE_KEY ? "present" : "missing",
    });
    return null;
  }

  const payload = decodeJwtPayload(SUPABASE_KEY);
  if (payload && payload["role"] && payload["role"] !== "anon") {
    throw new Error("Supabase key must be an anon key");
  }

  return createClient<Database>(
    SUPABASE_URL,
    SUPABASE_KEY,
    {
      auth: {
        storage: {
          getItem: () => null,
          setItem: () => {},
          removeItem: () => {},
        },
        persistSession: false,
        autoRefreshToken: true,
      },
      global: {
        fetch: loggingFetch,
      },
    },
  );
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createSupabaseClient();
