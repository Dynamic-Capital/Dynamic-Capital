import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { optionalEnv, requireEnv } from "../_shared/env.ts";
import { createClient } from "../_shared/client.ts";

const { OPENAI_API_KEY } = requireEnv(["OPENAI_API_KEY"] as const);
const GROK_API_KEY = optionalEnv("GROK_API_KEY");
const supabase = createClient("service");

async function fetchWithTimeout(
  url: string,
  init: RequestInit & { timeoutMs?: number; retries?: number } = {},
): Promise<Response> {
  const { timeoutMs = 10_000, retries = 1, ...options } = init;

  for (let attempt = 1; attempt <= retries; attempt++) {
    const controller = new AbortController();
    const id = setTimeout(() => controller.abort(), timeoutMs);
    try {
      return await fetch(url, { ...options, signal: controller.signal });
    } catch (err) {
      if (err instanceof DOMException && err.name === "AbortError") {
        if (attempt === retries) {
          throw new Error("Request to OpenAI timed out");
        }
      } else if (attempt === retries) {
        throw err;
      }
    } finally {
      clearTimeout(id);
    }
  }
  // Should be unreachable
  throw new Error("Failed to fetch after retries");
}

async function getEmbedding(text: string): Promise<number[]> {
  const res = await fetchWithTimeout(
    "https://api.openai.com/v1/embeddings",
    {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${OPENAI_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "text-embedding-3-small",
        input: text,
      }),
      retries: 3,
    },
  );
  const data = await res.json();
  if (!res.ok) {
    throw new Error(data.error?.message || "Embedding error");
  }
  return data.data[0].embedding as number[];
}

type LanguageCode = "dv" | "en";

type ChatMessage =
  | { role: "system"; content: string }
  | { role: "user"; content: string }
  | { role: "assistant"; content: string };

const SYSTEM_PROMPTS: Record<LanguageCode, string> = {
  en:
    `You are a knowledgeable trading assistant for Dynamic Capital, a premium trading signals and education service.

IMPORTANT GUIDELINES:
- Provide helpful, educational trading information
- Be professional but friendly
- Keep responses concise but informative (max 300 words)
- Include relevant emojis for better engagement
- Focus on education, not financial advice
- Mention Dynamic Capital's services when relevant
- Always include a disclaimer about risk

DYNAMIC CAPITAL SERVICES:
- Premium trading signals for XAUUSD, EURUSD, GBPUSD
- VIP community access with live analysis
- Educational resources and mentorship
- Bank transfer and crypto payment options
- 24/7 support via @DynamicCapital_Support

COMMON TOPICS:
- Trading basics and terminology
- Risk management principles
- Technical analysis concepts
- Market fundamentals
- Account setup and verification
- Payment methods and subscription plans
- Platform usage and features

Always end responses with: "üí° Need more help? Contact @DynamicCapital_Support or check our VIP plans!"`,
  dv: `ﬁåﬁ®ﬁÑﬁß Dynamic Capital ﬁéﬁ¨ AI ﬁáﬁ¨ﬁêﬁ®ﬁêﬁ∞ﬁìﬁ¶ﬁÇﬁ∞ﬁìﬁ¨ﬁáﬁ∞ﬁÜﬁ¶ﬁÅﬁ∞ ﬁãﬁ®ﬁàﬁ¨ﬁÄﬁ® ﬁÑﬁ¶ﬁÄﬁ™ﬁéﬁ¶ﬁáﬁ® (ﬁåﬁßﬁÇﬁ¶ﬁáﬁ®ﬁÇﬁ∞) ﬁñﬁ¶ﬁàﬁßﬁÑﬁ™ﬁåﬁ¶ﬁáﬁ∞ ﬁçﬁ®ﬁîﬁßﬁÇﬁ¨. ﬁáﬁ¨ﬁÇﬁ∞ﬁâﬁ¨ﬁÇﬁ∞ ﬁâﬁ¶ﬁéﬁ™ﬁâﬁ¶ﬁéﬁ™:
- ﬁêﬁ™ﬁàﬁßﬁçﬁ™ﬁåﬁ¶ﬁÜﬁ™ﬁéﬁ¨ ﬁñﬁ¶ﬁàﬁßﬁÑﬁ™ ﬁÉﬁ®ﬁêﬁ∞ﬁÜﬁ∞ ﬁâﬁ®ﬁÇﬁ®ﬁéﬁ∞ﬁâﬁ¨ﬁÇﬁ∞ﬁìﬁ∞ÿå ﬁìﬁ∞ﬁÉﬁ≠ﬁëﬁ®ﬁÇﬁ∞ ﬁâﬁ¶ﬁ¢ﬁ™ﬁçﬁ´ﬁâﬁßﬁåﬁ∞ÿå Dynamic Capital ﬁêﬁ¶ﬁÉﬁàﬁ®ﬁêﬁ∞ﬁåﬁ¶ﬁáﬁ∞ ﬁáﬁ¨ﬁÜﬁ™ﬁçﬁ¨ﬁàﬁ≠ﬁÇﬁ¨.
- ﬁâﬁ¶ﬁãﬁ™ﬁÜﬁÆﬁÅﬁ∞ﬁäﬁ® ﬁÜﬁ™ﬁÉﬁ®ﬁîﬁ¶ﬁÅﬁ∞ ﬁÑﬁ¨ﬁçﬁ¨ﬁàﬁ≠ﬁÇﬁ¨ÿå ﬁÑﬁ¶ﬁãﬁ¶ﬁçﬁ™ ﬁâﬁ®ﬁÇﬁ∞ﬁàﬁ¶ﬁÉﬁ™ ﬁÑﬁÆﬁëﬁ™ ﬁÇﬁ™ﬁÜﬁ™ﬁÉﬁ¨ﬁàﬁ≠ﬁÇﬁ¨ (ﬁÑﬁ¶ﬁáﬁ¨ﬁáﬁ∞ 300 ﬁÑﬁ¶ﬁáﬁ® ﬁÇﬁ™ﬁãﬁ¨ﬁàﬁ≠ﬁÇﬁ¨).
- ﬁÑﬁ¶ﬁãﬁ¶ﬁçﬁ™ﬁéﬁ¶ﬁáﬁ® ﬁÜﬁ¶ﬁçﬁßﬁåﬁ∞ﬁåﬁ¶ﬁÜﬁ™ﬁéﬁ¨ ﬁáﬁ¨ﬁâﬁÆﬁñﬁ©ﬁåﬁ¶ﬁáﬁ∞ ﬁçﬁ®ﬁîﬁßﬁÇﬁ¨.
- ﬁäﬁ¶ﬁáﬁ®ﬁÇﬁ≠ﬁÇﬁ∞ﬁùﬁ¶ﬁçﬁ∞ ﬁáﬁ¨ﬁëﬁ∞ﬁàﬁ¶ﬁáﬁ®ﬁêﬁ∞ ﬁÇﬁ™ﬁãﬁ¨ﬁàﬁ≠ﬁÇﬁ¨ÿõ ﬁåﬁ®ﬁÑﬁßﬁéﬁ¨ ﬁñﬁ¶ﬁàﬁßﬁÑﬁ™ﬁåﬁ¶ﬁÜﬁ™ ﬁåﬁ®ﬁÉﬁ©ﬁéﬁ¨ ﬁáﬁ¨ﬁëﬁ®ﬁÜﬁ≠ﬁùﬁ¶ﬁÇﬁ∞ﬁáﬁ¶ﬁÅﬁ∞ ﬁãﬁ®ﬁîﬁ™ﬁÇﬁ¨.
- Dynamic Capital ﬁéﬁ¨ ﬁêﬁ¶ﬁÉﬁàﬁ®ﬁêﬁ∞ﬁåﬁ¶ﬁáﬁ∞ ﬁÄﬁ™ﬁÉﬁ®ﬁÄﬁßﬁÇﬁ¨ﬁáﬁ¨ﬁàﬁ¨.
- ﬁÄﬁ™ﬁÉﬁ®ﬁÄﬁß ﬁñﬁ¶ﬁàﬁßﬁÑﬁ™ﬁéﬁ¶ﬁáﬁ® ﬁÉﬁ®ﬁêﬁ∞ﬁÜﬁ∞ ﬁëﬁ®ﬁêﬁ∞ﬁÜﬁ∞ﬁçﬁ≠ﬁâﬁ¶ﬁÉﬁ¨ﬁáﬁ∞ ﬁçﬁ®ﬁîﬁßﬁÇﬁ¨.

Dynamic Capital ﬁéﬁ¨ ﬁêﬁ¶ﬁÉﬁàﬁ®ﬁêﬁ∞ﬁåﬁ¶ﬁáﬁ∞:
- XAUUSD, EURUSD, GBPUSD ﬁáﬁ¶ﬁÅﬁ∞ ﬁàﬁßﬁÄﬁ¶ﬁÜﬁ¶ ﬁïﬁ∞ﬁÉﬁ®ﬁâﬁ®ﬁáﬁ¶ﬁâﬁ∞ ﬁêﬁ®ﬁéﬁ∞ﬁÇﬁ¶ﬁçﬁ∞ﬁåﬁ¶ﬁáﬁ∞
- ﬁäﬁ¶ﬁáﬁ®ﬁÇﬁ¨ﬁÇﬁ∞ﬁêﬁ∞ ﬁáﬁ¨ﬁÇﬁ¶ﬁçﬁ®ﬁêﬁ®ﬁêﬁ∞ﬁéﬁ¶ﬁáﬁ® ﬁáﬁ®ﬁåﬁ™ﬁÉﬁ™ ﬁáﬁ®ﬁÇﬁ∞ﬁåﬁ®ﬁíﬁßﬁÉﬁ™ﬁÜﬁ™ﬁÉﬁ™ﬁÇﬁ∞ ﬁàﬁ®ﬁïﬁ© ﬁÜﬁÆﬁâﬁ®ﬁîﬁ™ﬁÇﬁ®ﬁìﬁ©ﬁáﬁ¶ﬁÅﬁ∞ ﬁëﬁÆﬁÜﬁ¨ﬁêﬁ∞ﬁêﬁ∞
- ﬁáﬁ¨ﬁëﬁ®ﬁÜﬁ≠ﬁùﬁ¶ﬁÇﬁ∞ ﬁÉﬁ®ﬁêﬁØﬁêﬁ∞ﬁåﬁ¶ﬁáﬁ∞ﬁáﬁßﬁáﬁ® ﬁâﬁ¨ﬁÇﬁ∞ﬁìﬁØﬁÉﬁùﬁ®ﬁïﬁ∞
- ﬁÑﬁ¨ﬁÇﬁ∞ﬁÜﬁ™ ﬁìﬁ∞ﬁÉﬁßﬁÇﬁ∞ﬁêﬁ∞ﬁäﬁßﬁÉﬁáﬁßﬁáﬁ® ﬁÜﬁ∞ﬁÉﬁ®ﬁïﬁ∞ﬁìﬁØ ﬁïﬁ≠ﬁâﬁ¶ﬁÇﬁ∞ﬁìﬁ∞ﬁåﬁ¶ﬁÜﬁ™ﬁéﬁ¨ ﬁáﬁ®ﬁ¢ﬁ™ﬁçﬁßﬁÇﬁ∞
- 24/7 ﬁêﬁ¶ﬁïﬁØﬁìﬁ∞ @DynamicCapital_Support

ﬁâﬁ® ﬁâﬁ¶ﬁéﬁ™ﬁâﬁ¶ﬁéﬁ™ﬁåﬁ¶ﬁÜﬁßﬁáﬁ® ﬁÑﬁ¶ﬁáﬁ®ﬁàﬁ¨ﬁÉﬁ® ﬁêﬁ¶ﬁÉﬁàﬁ®ﬁêﬁ∞ﬁåﬁ¶ﬁáﬁ∞ ﬁáﬁ¨ﬁÇﬁéﬁ≠ﬁÇﬁ¨. ﬁÄﬁ™ﬁÉﬁ®ﬁÄﬁß ﬁñﬁ¶ﬁàﬁßﬁÑﬁ™ﬁåﬁ¶ﬁÜﬁ™ﬁéﬁ¶ﬁáﬁ® ﬁÉﬁ®ﬁêﬁ∞ﬁÜﬁ∞ ﬁëﬁ®ﬁêﬁ∞ﬁÜﬁ∞ﬁçﬁ≠ﬁâﬁ¶ﬁÉﬁ¨ﬁáﬁ∞ ﬁçﬁ®ﬁîﬁßﬁÇﬁ¨ÿå ﬁêﬁ¶ﬁÉﬁàﬁ®ﬁêﬁ∞ﬁåﬁ¶ﬁáﬁ∞ ﬁâﬁ¶ﬁ¢ﬁ™ﬁçﬁ´ﬁâﬁßﬁåﬁ∞ﬁåﬁ¶ﬁÜﬁ¶ﬁÅﬁ∞ ﬁáﬁ¶ﬁãﬁ® ﬁáﬁ®ﬁåﬁ™ﬁÉﬁ¨ﬁáﬁ∞ﬁéﬁ¶ﬁáﬁ® ﬁâﬁ¶ﬁáﬁ∞ﬁêﬁ¶ﬁçﬁ¶ﬁåﬁ¶ﬁáﬁ∞ ﬁçﬁ®ﬁîﬁßﬁÇﬁ¨.

ﬁÄﬁ™ﬁÉﬁ®ﬁÄﬁß ﬁñﬁ¶ﬁàﬁßﬁÑﬁ™ﬁåﬁ¶ﬁÜﬁ™ﬁéﬁ¶ﬁáﬁ® ﬁãﬁ®ﬁàﬁ¨ﬁÄﬁ® ﬁÑﬁ¶ﬁÄﬁ™ﬁéﬁ¶ﬁáﬁ® ﬁÇﬁ¶ﬁéﬁßﬁÇﬁ¨. ﬁÇﬁ¶ﬁáﬁ∞ﬁêﬁ¶ ﬁÑﬁ¶ﬁãﬁ¶ﬁçﬁ™ﬁåﬁ¶ﬁÜﬁ¶ﬁÅﬁ∞ ﬁáﬁ¨ﬁâﬁÆﬁñﬁ©ﬁåﬁ¶ﬁÜﬁßﬁáﬁ® ﬁìﬁ®ﬁïﬁ∞ﬁåﬁ¶ﬁáﬁ∞ ﬁãﬁ¨ﬁáﬁ∞ﬁàﬁßﬁçﬁ¨ﬁàﬁ≠.

ﬁÄﬁ™ﬁÉﬁ®ﬁÄﬁß ﬁñﬁ¶ﬁàﬁßﬁÑﬁ™ﬁåﬁ¶ﬁÜﬁ™ﬁéﬁ¶ﬁáﬁ® ﬁâﬁ® ﬁåﬁ¶ﬁäﬁßﬁåﬁ™ﬁéﬁ¨ ﬁáﬁ®ﬁÇﬁ∞ﬁêﬁ∞ﬁìﬁ∞ﬁÉﬁ¶ﬁÜﬁ∞ﬁùﬁ¶ﬁÇﬁ∞ ﬁÑﬁÆﬁëﬁ¶ﬁÅﬁ∞ﬁäﬁ® ﬁÑﬁ≠ﬁÇﬁ™ﬁÇﬁ∞.

ﬁÇﬁ¶ﬁáﬁ∞ﬁêﬁ¶ﬁáﬁ®ﬁÇﬁ∞ﬁêﬁ∞ﬁìﬁ∞ﬁÉﬁ¶ﬁÜﬁ∞ﬁùﬁ¶ﬁÇﬁ∞: "üí° ﬁáﬁ®ﬁåﬁ™ﬁÉﬁ¶ﬁÅﬁ∞ ﬁÑﬁ¶ﬁáﬁ¨ﬁáﬁ∞ ﬁÄﬁ™ﬁÉﬁ®ﬁÄﬁßﬁÇﬁ¨ÿü @DynamicCapital_Support ﬁáﬁ¶ﬁÅﬁ∞ ﬁéﬁ™ﬁÖﬁ≠ﬁÇﬁ¨ÿå VIP ﬁïﬁ∞ﬁçﬁ¨ﬁÇﬁ∞ﬁåﬁ¶ﬁáﬁ∞ ﬁÑﬁ¶ﬁçﬁß!"`,
};

async function callOpenAI(messages: ChatMessage[]): Promise<string> {
  const response = await fetchWithTimeout(
    "https://api.openai.com/v1/chat/completions",
    {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${OPENAI_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "gpt-4o-mini",
        messages,
        max_tokens: 500,
        temperature: 0.7,
      }),
      retries: 3,
    },
  );

  const data = await response.json();
  if (!response.ok) {
    throw new Error(data.error?.message || "AI service error");
  }

  const answer = data.choices?.[0]?.message?.content;
  if (typeof answer !== "string" || answer.trim() === "") {
    throw new Error("OpenAI returned empty response");
  }
  return answer;
}

async function callGrok(messages: ChatMessage[]): Promise<string> {
  if (!GROK_API_KEY) {
    throw new Error("Grok API key not configured");
  }

  const response = await fetchWithTimeout(
    "https://api.x.ai/v1/chat/completions",
    {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${GROK_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "grok-1",
        messages,
        max_tokens: 500,
        temperature: 0.7,
      }),
      retries: 2,
    },
  );

  const data = await response.json();
  if (!response.ok) {
    throw new Error(data.error?.message || "Grok service error");
  }
  const answer = data.choices?.[0]?.message?.content;
  if (typeof answer !== "string" || answer.trim() === "") {
    throw new Error("Grok returned empty response");
  }
  return answer;
}

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers":
    "authorization, x-client-info, apikey, content-type",
};

const handler = async (req: Request): Promise<Response> => {
  // Handle CORS preflight requests
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { question, test, language: rawLanguage } = await req
      .json()
      .catch(() => ({}));

    const language: LanguageCode = rawLanguage === "en" ? "en" : "dv";

    if (test) {
      return new Response(
        JSON.stringify({ success: true, message: "ai-faq-assistant OK" }),
        { headers: { ...corsHeaders, "Content-Type": "application/json" } },
      );
    }

    if (!question) {
      return new Response(JSON.stringify({ error: "Question is required" }), {
        status: 400,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      });
    }

    const questionEmbedding = await getEmbedding(question);

    const { data: matches, error: matchError } = await supabase.rpc(
      "match_faq",
      {
        query_embedding: questionEmbedding,
        match_count: 3,
        match_language: language,
      },
    );

    if (matchError) console.error("match_faq error", matchError);

    const topMatch = matches?.[0];
    if (topMatch && topMatch.distance < 0.3) {
      return new Response(
        JSON.stringify({ answer: topMatch.answer, language }),
        {
          headers: { ...corsHeaders, "Content-Type": "application/json" },
        },
      );
    }

    const faqContext = matches
      ?.map((m) => `Q: ${m.question}\nA: ${m.answer}`)
      .join("\n\n");

    const messages: ChatMessage[] = [
      { role: "system", content: SYSTEM_PROMPTS[language] },
    ];
    if (faqContext) {
      messages.push({
        role: "system",
        content: `FAQ context:\n${faqContext}`,
      });
    }
    messages.push({ role: "user", content: question });

    let answer: string;
    try {
      answer = language === "dv"
        ? await callGrok(messages)
        : await callOpenAI(messages);
    } catch (err) {
      if (language === "dv") {
        console.warn("Grok request failed, falling back to OpenAI", err);
        answer = await callOpenAI(messages);
      } else {
        throw err;
      }
    }

    const { error: insertError } = await supabase.from("faq_embeddings").insert(
      {
        question,
        answer,
        embedding: questionEmbedding,
        language,
      },
    );
    if (insertError) console.error("insert faq_embeddings", insertError);

    return new Response(JSON.stringify({ answer, language }), {
      headers: { ...corsHeaders, "Content-Type": "application/json" },
    });
  } catch (error) {
    console.error("Error in ai-faq-assistant function:", error);
    let details = "Unknown error";
    if (error instanceof Error) {
      details = error.message;
    }
    const status = details.includes("timed out") ? 504 : 500;
    return new Response(
      JSON.stringify({
        error: "Failed to get AI response",
        details,
      }),
      {
        status,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      },
    );
  }
};

export default handler;

if (import.meta.main) {
  serve(handler);
}
