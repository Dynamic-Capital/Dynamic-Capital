"""Shared insight dataclasses and protocols for orchestration agents."""

from __future__ import annotations

from dataclasses import dataclass
from datetime import datetime, timezone
from typing import Mapping, Protocol

Number = float | int

__all__ = ["AgentInsight", "InsightAgent", "utcnow", "Number"]


def utcnow() -> datetime:
    """Return the current time in UTC with timezone awareness."""

    return datetime.now(timezone.utc)


@dataclass(slots=True)
class AgentInsight:
    """Structured payload generated by an orchestration agent."""

    domain: str
    generated_at: datetime
    title: str
    metrics: Mapping[str, Number]
    highlights: tuple[str, ...] = ()
    details: Mapping[str, object] | None = None


class InsightAgent(Protocol):
    """Protocol describing the core behaviour of orchestration agents."""

    domain: str

    def generate_insight(self, **kwargs: object) -> AgentInsight:
        """Produce an :class:`AgentInsight` describing the latest observations."""

        ...
