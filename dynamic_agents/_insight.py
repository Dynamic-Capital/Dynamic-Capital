"""Shared insight dataclasses and protocols for orchestration agents."""

from __future__ import annotations

from dataclasses import dataclass
from datetime import datetime, timezone
from typing import Iterable, Mapping, Protocol

Number = float | int

__all__ = ["AgentInsight", "InsightAgent", "utcnow", "Number"]


def utcnow() -> datetime:
    """Return the current time in UTC with timezone awareness."""

    return datetime.now(timezone.utc)


def _normalise_sequence(values: Iterable[str] | None) -> tuple[str, ...]:
    if not values:
        return ()
    normalised: list[str] = []
    seen: set[str] = set()
    for value in values:
        text = value.strip()
        if not text:
            continue
        key = text.lower()
        if key in seen:
            continue
        seen.add(key)
        normalised.append(text)
    return tuple(normalised)


@dataclass(slots=True)
class AgentInsight:
    """Structured payload generated by an orchestration agent."""

    domain: str
    generated_at: datetime
    title: str
    metrics: Mapping[str, Number]
    highlights: tuple[str, ...] = ()
    details: Mapping[str, object] | None = None
    domains: tuple[str, ...] = ()
    states: tuple[str, ...] = ()

    def __post_init__(self) -> None:
        self.domain = self.domain.strip()
        self.domains = _normalise_sequence(self.domains)
        self.states = _normalise_sequence(self.states)


class InsightAgent(Protocol):
    """Protocol describing the core behaviour of orchestration agents."""

    domain: str

    def generate_insight(self, **kwargs: object) -> AgentInsight:
        """Produce an :class:`AgentInsight` describing the latest observations."""

        ...
