"""Shared helpers for autogenerated Dynamic build modules."""

from __future__ import annotations

import os
import sys
from typing import Any, Mapping

__all__ = (
    "BuildPlaceholderError",
    "build_placeholder",
    "main_placeholder",
)

_PLACEHOLDER_GUIDANCE = (
    "Implement build() to integrate with the Dynamic CLI."
)


class BuildPlaceholderError(NotImplementedError):
    """Raised when a package build module has not been implemented."""

    def __init__(self, package_name: str) -> None:
        self.package_name = package_name
        super().__init__(f"{package_name}.build is not implemented yet.")


def _should_silence_output() -> bool:
    value = os.environ.get("DYNAMIC_BUILD_PLACEHOLDER_SILENCE")
    if value is None:
        return False
    return value.lower() in {"1", "true", "yes", "on"}


def build_placeholder(
    package_name: str,
    *_args: Any,
    **_kwargs: Any,
) -> Mapping[str, Any]:
    """Placeholder build implementation for Dynamic packages."""

    raise BuildPlaceholderError(package_name)


def main_placeholder(package_name: str) -> int:
    """CLI entry point used by the autogenerated stubs."""

    if not _should_silence_output():
        message = (
            f"{package_name}.build is a placeholder module.\n"
            f"{_PLACEHOLDER_GUIDANCE}"
        )
        print(message, file=sys.stderr)

    return 1
