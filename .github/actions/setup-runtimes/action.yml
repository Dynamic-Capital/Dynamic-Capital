name: Setup project runtimes
description: Configure Node, Deno, and Python with shared caching defaults for CI pipelines.
inputs:
  enable-node:
    description: "Set to 'true' to install Node.js using actions/setup-node."
    required: false
    default: 'false'
  node-version:
    description: Node.js version to install when enable-node is true.
    required: false
    default: '20'
  node-cache:
    description: Cache strategy to pass to actions/setup-node.
    required: false
    default: npm
  node-cache-dependency-path:
    description: Newline-separated list of package-lock files for dependency caching.
    required: false
    default: package-lock.json
  enable-deno:
    description: "Set to 'true' to install Deno and hydrate its cache."
    required: false
    default: 'false'
  deno-version:
    description: Deno version to install when enable-deno is true.
    required: false
    default: v1.x
  deno-cache-paths:
    description: Paths to persist for the Deno cache.
    required: false
    default: |
      ~/.cache/deno
      ~/.deno
  deno-cache-key:
    description: Key for actions/cache when persisting the Deno cache. Leave blank to skip caching.
    required: false
    default: ''
  deno-cache-restore-keys:
    description: Restore keys for the Deno cache.
    required: false
    default: ''
  enable-python:
    description: "Set to 'true' to install Python using actions/setup-python."
    required: false
    default: 'false'
  python-version:
    description: Python version to install when enable-python is true.
    required: false
    default: '3.11'
  python-cache:
    description: Cache backend for actions/setup-python.
    required: false
    default: pip
  python-cache-dependency-path:
    description: File used to seed the pip cache key. Leave blank to skip caching.
    required: false
    default: ''
  write-summary:
    description: "Set to 'true' to append the configured runtime versions and cache status to the job summary."
    required: false
    default: 'false'
outputs:
  node-version:
    description: Installed Node.js version.
    value: ${{ steps.setup-node.outputs['node-version'] || '' }}
  node-cache-hit:
    description: Whether the Node.js dependency cache was restored.
    value: ${{ steps.setup-node.outputs['cache-hit'] || '' }}
  deno-version:
    description: Installed Deno version.
    value: ${{ steps.setup-deno.outputs['deno-version'] || '' }}
  deno-cache-hit:
    description: Whether the Deno cache was restored.
    value: ${{ steps.deno-cache.outputs['cache-hit'] || '' }}
  python-version:
    description: Installed Python version.
    value: ${{ steps.setup-python.outputs['python-version'] || '' }}
  python-cache-hit:
    description: Whether the pip cache was restored.
    value: ${{ steps.setup-python.outputs['cache-hit'] || '' }}
runs:
  using: composite
  steps:
    - name: Setup Node.js
      if: ${{ inputs.enable-node == 'true' }}
      id: setup-node
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        cache: ${{ inputs.node-cache }}
        cache-dependency-path: ${{ inputs.node-cache-dependency-path }}
    - name: Optimize Node.js tooling defaults
      if: ${{ inputs.enable-node == 'true' }}
      shell: bash
      run: |
        set -euo pipefail
        corepack enable || true
        npm config set fund false --location=global
        npm config set audit false --location=global
        npm config set progress false --location=global
        npm config set update-notifier false --location=global
        {
          echo 'NPM_CONFIG_FUND=false'
          echo 'NPM_CONFIG_AUDIT=false'
          echo 'NPM_CONFIG_PROGRESS=false'
          echo 'NPM_CONFIG_UPDATE_NOTIFIER=false'
        } >> "$GITHUB_ENV"
    - name: Setup Python
      if: ${{ inputs.enable-python == 'true' }}
      id: setup-python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}
        cache: ${{ inputs.python-cache }}
        cache-dependency-path: ${{ inputs.python-cache-dependency-path }}
    - name: Setup Deno
      if: ${{ inputs.enable-deno == 'true' }}
      id: setup-deno
      uses: denoland/setup-deno@v1
      with:
        deno-version: ${{ inputs.deno-version }}
    - name: Cache Deno dependencies
      if: ${{ inputs.enable-deno == 'true' && inputs.deno-cache-key != '' }}
      id: deno-cache
      uses: actions/cache@v4
      with:
        path: ${{ inputs.deno-cache-paths }}
        key: ${{ inputs.deno-cache-key }}
        restore-keys: ${{ inputs.deno-cache-restore-keys }}
    - name: Append runtime summary
      if: ${{ inputs.write-summary == 'true' }}
      shell: bash
      env:
        ENABLE_NODE: ${{ inputs.enable-node }}
        NODE_VERSION: ${{ steps.setup-node.outputs['node-version'] || '' }}
        NODE_CACHE_HIT: ${{ steps.setup-node.outputs['cache-hit'] || '' }}
        ENABLE_DENO: ${{ inputs.enable-deno }}
        DENO_VERSION: ${{ steps.setup-deno.outputs['deno-version'] || '' }}
        DENO_CACHE_HIT: ${{ steps.deno-cache.outputs['cache-hit'] || '' }}
        ENABLE_PYTHON: ${{ inputs.enable-python }}
        PYTHON_VERSION: ${{ steps.setup-python.outputs['python-version'] || '' }}
        PYTHON_CACHE_HIT: ${{ steps.setup-python.outputs['cache-hit'] || '' }}
      run: |
        set -euo pipefail
        summary_file="${GITHUB_STEP_SUMMARY:-}"
        if [ -z "${summary_file}" ]; then
          exit 0
        fi

        {
          echo "### Runtime setup"
          if [ "${ENABLE_NODE}" = "true" ]; then
            node_version="${NODE_VERSION:-unknown}"
            cache_status="${NODE_CACHE_HIT:-n/a}"
            echo "- Node.js: \`${node_version}\` (cache hit: \`${cache_status}\`)"
          fi
          if [ "${ENABLE_DENO}" = "true" ]; then
            deno_version="${DENO_VERSION:-unknown}"
            cache_status="${DENO_CACHE_HIT:-n/a}"
            echo "- Deno: \`${deno_version}\` (cache hit: \`${cache_status}\`)"
          fi
          if [ "${ENABLE_PYTHON}" = "true" ]; then
            python_version="${PYTHON_VERSION:-unknown}"
            cache_status="${PYTHON_CACHE_HIT:-n/a}"
            echo "- Python: \`${python_version}\` (cache hit: \`${cache_status}\`)"
          fi
        } >> "${summary_file}"
