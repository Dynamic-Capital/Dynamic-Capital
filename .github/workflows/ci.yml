name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  quality:
    name: Build, typecheck, lint, and test
    runs-on: ubuntu-latest
    env:
      DENO_TLS_CA_STORE: system
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - id: script-flags
        name: Detect npm scripts
        run: |
          set -euo pipefail
          for script in build typecheck lint test; do
            if jq -e --arg name "$script" '.scripts[$name]' package.json >/dev/null; then
              echo "${script}=true" >> "$GITHUB_OUTPUT"
            else
              echo "${script}=false" >> "$GITHUB_OUTPUT"
            fi
          done

      - name: Setup runtimes
        id: setup-runtimes
        uses: ./.github/actions/setup-runtimes
        with:
          enable-node: true
          node-version: "20"
          node-cache: npm
          node-cache-dependency-path: |
            package-lock.json
            naming-engine/package-lock.json
          enable-deno: ${{ steps.script-flags.outputs.test == 'true' }}
          deno-version: v1.x
          deno-cache-key: ${{ steps.script-flags.outputs.test == 'true' && format('{0}-deno-{1}', runner.os, hashFiles('deno.lock')) || '' }}
          deno-cache-restore-keys: ${{ steps.script-flags.outputs.test == 'true' && format('{0}-deno-', runner.os) || '' }}
          write-summary: true

      - name: Install dependencies
        run: npm ci --no-audit --prefer-offline

      - name: Windows filename check
        run: |
          set -euo pipefail
          npm run lint:paths 2>&1 | tee lint-paths.log

      - name: Build
        if: steps.script-flags.outputs.build == 'true'
        run: |
          set -euo pipefail
          npm run build 2>&1 | tee build.log

      - name: Typecheck
        if: steps.script-flags.outputs.typecheck == 'true'
        run: |
          set -euo pipefail
          npm run typecheck 2>&1 | tee typecheck.log

      - name: Lint
        if: steps.script-flags.outputs.lint == 'true'
        run: |
          set -euo pipefail
          npm run lint 2>&1 | tee lint.log

      - name: Test
        if: steps.script-flags.outputs.test == 'true'
        run: |
          set -euo pipefail
          npm run test 2>&1 | tee test.log

      - name: Upload CI diagnostics
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ci-logs
          if-no-files-found: ignore
          path: |
            build.log
            typecheck.log
            lint.log
            lint-paths.log
            test.log

  python-tests:
    name: Python GPT regression tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Python runtime
        uses: ./.github/actions/setup-runtimes
        with:
          enable-python: "true"
          python-version: "3.11"
          python-cache: pip
          python-cache-dependency-path: tests_python/requirements.txt
          write-summary: "true"

      - name: Install Python test requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r tests_python/requirements.txt

      - name: Run GPT regression suite
        run: pytest tests_python/test_dynamic_gpt_model.py
