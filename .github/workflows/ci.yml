name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  quality:
    name: Build, typecheck, lint, and test
    runs-on: ubuntu-latest
    env:
      DENO_TLS_CA_STORE: system
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - id: script-flags
        name: Detect npm scripts
        run: |
          echo "build=$(npm pkg get scripts.build | tr -d '"')" >> "$GITHUB_OUTPUT"
          echo "typecheck=$(npm pkg get scripts.typecheck | tr -d '"')" >> "$GITHUB_OUTPUT"
          echo "lint=$(npm pkg get scripts.lint | tr -d '"')" >> "$GITHUB_OUTPUT"
          echo "test=$(npm pkg get scripts.test | tr -d '"')" >> "$GITHUB_OUTPUT"

      - name: Build
        if: steps.script-flags.outputs.build != 'undefined'
        run: npm run build 2>&1 | tee build.log

      - name: Typecheck
        if: steps.script-flags.outputs.typecheck != 'undefined'
        run: npm run typecheck 2>&1 | tee typecheck.log

      - name: Lint
        if: steps.script-flags.outputs.lint != 'undefined'
        run: npm run lint 2>&1 | tee lint.log

      - name: Setup Deno
        if: steps.script-flags.outputs.test != 'undefined'
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Cache Deno dependencies
        if: steps.script-flags.outputs.test != 'undefined'
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/deno
            ~/.deno
          key: ${{ runner.os }}-deno-${{ hashFiles('deno.lock') }}
          restore-keys: |
            ${{ runner.os }}-deno-

      - name: Test
        if: steps.script-flags.outputs.test != 'undefined'
        run: npm run test 2>&1 | tee test.log

  python-tests:
    name: Python GPT regression tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('tests_python/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python test requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r tests_python/requirements.txt

      - name: Run GPT regression suite
        run: pytest tests_python/test_dynamic_gpt_model.py
