name: TONCenter Schema Audit

on:
  workflow_dispatch:
  schedule:
    - cron: "0 6 * * *" # Daily at 06:00 UTC

permissions:
  contents: read

jobs:
  audit:
    name: Audit TONCenter schema
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install httpx

      - name: Run schema guard
        env:
          TONCENTER_SCHEMA_ACCOUNTS: |
            EQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM9c
            0:74D4AEB37037968558D079A5F00A56D00D28A58BA3EF89157BC51EF38DDA7306
            0:210B9EC158ADF3993014171080F4AEA102CFD7C89E6AFD7791A5F07620CCCCF2
          TONCENTER_API_KEY: ${{ secrets.TONCENTER_API_KEY }}
        run: |
          python -m dynamic_ton.schema_guard_runner \
            --limit 50 \
            --include-accounts \
            --output-json schema-report.json \
            --allow-drift

      - name: Upload schema report
        uses: actions/upload-artifact@v4
        with:
          name: toncenter-schema-report
          path: schema-report.json

      - name: Summarise schema audit
        run: |
          python - <<'PY'
          import json
          import os
          from pathlib import Path

          report_path = Path("schema-report.json")
          data = json.loads(report_path.read_text())

          lines: list[str] = ["# TONCenter Schema Audit", ""]
          for account, report in data.get("accounts", {}).items():
              lines.append(f"## {account}")
              lines.append(f"- Records fetched: {report['total_records']}")
              unknown = report.get("unknown_fields", {})
              if unknown:
                  lines.append("- Unknown fields detected:")
                  for field, count in unknown.items():
                      lines.append(f"  - {field}: {count} occurrence(s)")
              else:
                  lines.append("- Unknown fields detected: none")
              lines.append("")

          summary_path = Path(os.environ["GITHUB_STEP_SUMMARY"])
          with summary_path.open("a", encoding="utf-8") as handle:
              handle.write("\n".join(lines).strip() + "\n")

          if data.get("has_drift"):
              raise SystemExit("Schema drift detected; review unknown fields above.")
          PY
