name: Project Intake
on:
  issues:
    types: [opened, edited]
  pull_request:
    types: [opened, reopened, ready_for_review, synchronize]
permissions:
  contents: read
  issues: write
  pull-requests: write
  project: write
jobs:
  issue_intake:
    if: github.event_name == 'issues'
    runs-on: ubuntu-latest
    steps:
      - name: Check PROJECT_URL secret
        id: guard
        run: |
          if [ -z "${{ secrets.PROJECT_URL }}" ]; then
            echo "missing=true" >> "$GITHUB_OUTPUT"
          else
            echo "missing=false" >> "$GITHUB_OUTPUT"
          fi
      - name: Notify about missing project configuration
        if: steps.guard.outputs.missing == 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.issue.number }}
          body-includes: "PROJECT_URL"
          body: |
            ⚠️ Project automation is almost ready, but the `PROJECT_URL` secret is not configured yet. Set it to your GitHub Project URL so new issues are added and triaged automatically.
      - name: Stop when project is not configured
        if: steps.guard.outputs.missing == 'true'
        run: exit 0
      - name: Add issue to project
        uses: actions/add-to-project@v1
        with:
          project-url: ${{ secrets.PROJECT_URL }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Label status for issues
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: status: needs-triage
      - name: Update project status field
        uses: actions/github-script@v7
        env:
          PROJECT_URL: ${{ secrets.PROJECT_URL }}
        with:
          script: |
            const projectUrl = process.env.PROJECT_URL;
            if (!projectUrl) {
              core.info('PROJECT_URL not configured; skipping status update.');
              return;
            }
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const issueNumber = context.payload.issue.number;

            const issueData = await github.graphql(`
              query($owner: String!, $repo: String!, $number: Int!) {
                repository(owner: $owner, name: $repo) {
                  issue(number: $number) {
                    id
                  }
                }
              }
            `, { owner, repo, number: issueNumber });

            const issueId = issueData.repository?.issue?.id;
            if (!issueId) {
              core.warning('Could not resolve issue id.');
              return;
            }

            const projectData = await github.graphql(`
              query($projectUrl: URI!, $contentId: ID!) {
                projectV2(url: $projectUrl) {
                  id
                  fields(first: 20) {
                    nodes {
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                  items(first: 20, contentId: $contentId) {
                    nodes {
                      id
                    }
                  }
                }
              }
            `, { projectUrl, contentId: issueId });

            const project = projectData.projectV2;
            if (!project) {
              core.warning('Project not found for provided URL.');
              return;
            }

            const itemId = project.items.nodes[0]?.id;
            if (!itemId) {
              core.warning('No project item found for issue; it may have been removed.');
              return;
            }

            const statusField = project.fields.nodes.find(
              (field) => field?.name?.toLowerCase() === 'status'
            );
            const option = statusField?.options?.find(
              (opt) => opt.name?.toLowerCase() === 'needs-triage'
            );

            if (statusField?.id && option?.id) {
              await github.graphql(`
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { singleSelectOptionId: $optionId }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `, {
                projectId: project.id,
                itemId,
                fieldId: statusField.id,
                optionId: option.id,
              });
              core.info('Project status set to needs-triage.');
            } else {
              core.warning('Status field or "needs-triage" option not found.');
            }
  pr_intake:
    if: github.event_name == 'pull_request' && github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    steps:
      - name: Check PROJECT_URL secret
        id: guard
        run: |
          if [ -z "${{ secrets.PROJECT_URL }}" ]; then
            echo "missing=true" >> "$GITHUB_OUTPUT"
          else
            echo "missing=false" >> "$GITHUB_OUTPUT"
          fi
      - name: Notify about missing project configuration
        if: steps.guard.outputs.missing == 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body-includes: "PROJECT_URL"
          body: |
            ⚠️ Project automation is almost ready, but the `PROJECT_URL` secret is not configured yet. Set it to your GitHub Project URL so pull requests can sync status automatically.
      - name: Stop when project is not configured
        if: steps.guard.outputs.missing == 'true'
        run: exit 0
      - name: Add pull request to project
        uses: actions/add-to-project@v1
        with:
          project-url: ${{ secrets.PROJECT_URL }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Label status for pull requests
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: status: needs-review
      - name: Update project status field
        uses: actions/github-script@v7
        env:
          PROJECT_URL: ${{ secrets.PROJECT_URL }}
        with:
          script: |
            const projectUrl = process.env.PROJECT_URL;
            if (!projectUrl) {
              core.info('PROJECT_URL not configured; skipping status update.');
              return;
            }
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const prNumber = context.payload.pull_request.number;

            const prData = await github.graphql(`
              query($owner: String!, $repo: String!, $number: Int!) {
                repository(owner: $owner, name: $repo) {
                  pullRequest(number: $number) {
                    id
                  }
                }
              }
            `, { owner, repo, number: prNumber });

            const prId = prData.repository?.pullRequest?.id;
            if (!prId) {
              core.warning('Could not resolve pull request id.');
              return;
            }

            const projectData = await github.graphql(`
              query($projectUrl: URI!, $contentId: ID!) {
                projectV2(url: $projectUrl) {
                  id
                  fields(first: 20) {
                    nodes {
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                  items(first: 20, contentId: $contentId) {
                    nodes {
                      id
                    }
                  }
                }
              }
            `, { projectUrl, contentId: prId });

            const project = projectData.projectV2;
            if (!project) {
              core.warning('Project not found for provided URL.');
              return;
            }

            const itemId = project.items.nodes[0]?.id;
            if (!itemId) {
              core.warning('No project item found for pull request; it may have been removed.');
              return;
            }

            const statusField = project.fields.nodes.find(
              (field) => field?.name?.toLowerCase() === 'status'
            );
            const option = statusField?.options?.find(
              (opt) => opt.name?.toLowerCase() === 'needs-review'
            );

            if (statusField?.id && option?.id) {
              await github.graphql(`
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { singleSelectOptionId: $optionId }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `, {
                projectId: project.id,
                itemId,
                fieldId: statusField.id,
                optionId: option.id,
              });
              core.info('Project status set to needs-review.');
            } else {
              core.warning('Status field or "needs-review" option not found.');
            }
      - name: Link closing issues in project
        uses: actions/github-script@v7
        env:
          PROJECT_URL: ${{ secrets.PROJECT_URL }}
        with:
          script: |
            const projectUrl = process.env.PROJECT_URL;
            if (!projectUrl) {
              core.info('PROJECT_URL not configured; skipping linking.');
              return;
            }
            const body = context.payload.pull_request.body || '';
            const matches = [...body.matchAll(/\b(closes|close|closed|fixes|fix|fixed|resolves|resolve|resolved)\s+#(\d+)/gi)];
            const uniqueNumbers = [...new Set(matches.map((match) => Number(match[2])))]
              .filter((num) => Number.isInteger(num));

            if (uniqueNumbers.length === 0) {
              core.info('No closing issue references found.');
              return;
            }

            const owner = context.repo.owner;
            const repo = context.repo.repo;

            const prData = await github.graphql(`
              query($owner: String!, $repo: String!, $number: Int!) {
                repository(owner: $owner, name: $repo) {
                  pullRequest(number: $number) {
                    id
                  }
                }
              }
            `, { owner, repo, number: context.payload.pull_request.number });
            const prId = prData.repository?.pullRequest?.id;
            if (!prId) {
              core.warning('Unable to resolve pull request id for linking.');
              return;
            }

            const projectData = await github.graphql(`
              query($projectUrl: URI!, $contentId: ID!) {
                projectV2(url: $projectUrl) {
                  id
                  items(first: 20, contentId: $contentId) {
                    nodes { id }
                  }
                }
              }
            `, { projectUrl, contentId: prId });
            const project = projectData.projectV2;
            const prItemId = project?.items?.nodes?.[0]?.id;
            if (!project || !prItemId) {
              core.warning('Project item for pull request not found; skipping linking.');
              return;
            }

            const projectId = project.id;

            for (const number of uniqueNumbers) {
              try {
                const issueData = await github.graphql(`
                  query($owner: String!, $repo: String!, $number: Int!) {
                    repository(owner: $owner, name: $repo) {
                      issue(number: $number) {
                        id
                      }
                    }
                  }
                `, { owner, repo, number });

                const issueId = issueData.repository?.issue?.id;
                if (!issueId) {
                  core.warning(`Issue #${number} not found in repository.`);
                  continue;
                }

                const projectIssueData = await github.graphql(`
                  query($projectUrl: URI!, $contentId: ID!) {
                    projectV2(url: $projectUrl) {
                      id
                      items(first: 20, contentId: $contentId) {
                        nodes { id }
                      }
                    }
                  }
                `, { projectUrl, contentId: issueId });

                const issueItemId = projectIssueData.projectV2?.items?.nodes?.[0]?.id;
                let ensuredIssueItemId = issueItemId;

                if (!issueItemId) {
                  const addResult = await github.graphql(`
                    mutation($projectId: ID!, $contentId: ID!) {
                      addProjectV2ItemById(input: { projectId: $projectId, contentId: $contentId }) {
                        item { id }
                      }
                    }
                  `, { projectId, contentId: issueId });
                  ensuredIssueItemId = addResult.addProjectV2ItemById?.item?.id;
                  core.info(`Added issue #${number} to project to enable linking.`);
                }

                if (!ensuredIssueItemId) {
                  core.warning(`Could not determine project item id for issue #${number}.`);
                  continue;
                }

                try {
                  await github.graphql(`
                    mutation($projectId: ID!, $itemId: ID!, $linkedItemId: ID!) {
                      linkProjectV2Items(input: { projectId: $projectId, itemId: $itemId, linkedItemId: $linkedItemId }) {
                        clientMutationId
                      }
                    }
                  `, { projectId, itemId: prItemId, linkedItemId: ensuredIssueItemId });
                  core.info(`Linked pull request to issue #${number} in project.`);
                } catch (error) {
                  core.warning(`Unable to link project items for issue #${number}: ${error.message}`);
                }
              } catch (error) {
                core.warning(`Failed processing issue #${number}: ${error.message}`);
              }
            }
