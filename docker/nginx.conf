worker_processes auto;

# Nginx configuration for ${DOMAIN} and subdomains
# - Redirects all HTTP traffic to HTTPS
# - Serves Let's Encrypt certificates from /etc/letsencrypt
# - Proxies requests to the internal app service

# Basic event configuration
events {
    worker_connections 1024;
}

http {
    upstream app_backend {
        # Docker DNS round-robins to each replica when scaled
        server app:8080 max_fails=3 fail_timeout=30s;
        server app:8080 max_fails=3 fail_timeout=30s;
        server app:8080 max_fails=3 fail_timeout=30s;
    }

    # Catch-all HTTP server: serve ACME challenges and redirect everything else to HTTPS
    server {
        listen 80 default_server;
        server_name _;

        location /.well-known/acme-challenge/ {
            root /var/lib/letsencrypt;
        }

        location / {
            return 301 https://$host$request_uri;
        }
    }

    # Primary HTTPS server for ${DOMAIN} and common subdomains
    server {
        listen 443 ssl;
        server_name ${DOMAIN} api.${DOMAIN} www.${DOMAIN};

        ssl_certificate /etc/letsencrypt/live/${DOMAIN}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/${DOMAIN}/privkey.pem;
        include /etc/letsencrypt/options-ssl-nginx.conf;
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

        location / {
            proxy_pass http://app_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_next_upstream error timeout http_502 http_503 http_504;
        }
    }

    # Fallback HTTPS server: redirect unknown hosts to the canonical domain
    server {
        listen 443 default_server ssl;
        server_name _;

        ssl_certificate /etc/letsencrypt/live/${DOMAIN}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/${DOMAIN}/privkey.pem;
        include /etc/letsencrypt/options-ssl-nginx.conf;
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

        return 301 https://${DOMAIN}$request_uri;
    }
}
