"""Python trading strategy utilities for Dynamic Capital."""

from . import trade_logic as _trade_logic
from .awesome_api import (
    AwesomeAPIAutoCalculator,
    AwesomeAPIAutoMetrics,
    AwesomeAPIClient,
    AwesomeAPIError,
    AwesomeAPISnapshotBuilder,
)
from .awesome_sync import (
    AwesomeAlgoSyncEngine,
    AwesomeAlgoSyncReport,
    AwesomeAlgoSyncRequest,
    AwesomeLLMInsights,
)
from .back_to_breakeven import (
    AccountSnapshot,
    BackToBreakevenCalculator,
    BreakevenPhase,
    BreakevenPlan,
    BreakevenRequest,
)
from .elliott_wave import ElliottSwing, ElliottWaveAnalyzer, ElliottWaveReport
from .mechanical_analysis import MechanicalAnalysisCalculator, MechanicalMetrics
from .core_orchestration import (
    ObserverEvent,
    OrchestrationBuilder,
    OrchestrationContext,
    OrchestrationError,
    OrchestrationExecution,
    OrchestrationObserver,
    OrchestrationPlan,
    OrchestrationStep,
    StepExecution,
    StepHandler,
    StepResult,
    StepStatus,
    execute_plan,
)
from .economic_catalysts import (
    EconomicCatalyst,
    EconomicCatalystGenerator,
    EconomicCatalystSyncJob,
)
from .dex_scanner import (
    DexPoolSnapshot,
    DexScannerAlgo,
    DexScannerSignal,
    build_scanner_for_tokens,
)
from .currency_correlation import (
    CorrelationSeries,
    CurrencyCorrelationCalculator,
    CurrencyCorrelationReport,
    CurrencyCorrelationRequest,
)
from .loss_recovery_programme import (
    AccountState,
    LossRecoveryConfig,
    LossRecoveryProgramme,
    RecoveryPlan,
    RecoveryStep,
)
from .market_advisory import (
    MarketAdvisoryEngine,
    MarketAdvisoryReport,
    MarketAdvisoryRequest,
)
from .dct_token_sync import (
    DCTAllocationEngine,
    DCTAllocationResult,
    DCTAllocationRule,
    DCTMarketSnapshot,
    DCTMultiLLMOptimiser,
    DCTPriceBreakdown,
    DCTPriceCalculator,
    DCTPriceInputs,
    DCTProductionInputs,
    DCTProductionPlan,
    DCTProductionPlanner,
    DCTLLMAdjustment,
    DCTLLMOptimisationResult,
    DCTSyncJob,
)
from .vip_auto_token_sync import (
    VipAutoSyncJob,
    VipAutoSyncReport,
    VipMembershipProvider,
    VipMembershipSnapshot,
    VipTokenGrant,
    VipTokenisationStrategy,
)
from .desk_token_hub import (
    CHECKLIST_REFERENCE as DESK_TOKEN_CHECKLIST_REFERENCE,
    TokenHubDevelopmentContext,
    TokenHubDevelopmentOrchestrator,
    TokenHubSyncReport,
)
from .project_faq_generator import (
    FAQEntry,
    FAQRequest,
    FAQSource,
    ProjectFAQGenerator,
    ProjectFAQPackage,
)
from .executive_playbooks import (
    CEO_PLAYBOOK,
    CFO_PLAYBOOK,
    COO_PLAYBOOK,
    EXECUTIVE_PLAYBOOKS,
    build_executive_playbooks,
    build_executive_sync_algorithm,
)
from .route_keeper import Route, RouteKeeperAlgorithm, RouteKeeperSyncResult
from .tonkeeper_sync import (
    TonkeeperAccountSnapshot,
    TonkeeperLLMCoordinator,
    TonkeeperLLMResolution,
    TonkeeperNetworkStatus,
    TonkeeperSyncContext,
    TonkeeperSyncEngine,
    TonkeeperSyncPlan,
)
from .trading_psychology_elements import (
    Element,
    ElementProfile,
    ElementSignal,
    PsychologyTelemetry,
    score_elements,
)
from .time_keeper import (
    KillZone,
    MVT_TIMEZONE,
    TimeKeeperAlgorithm,
    TimeKeeperSyncResult,
    TradingSession,
)

_trade_exports = list(getattr(_trade_logic, "__all__", []))  # type: ignore[attr-defined]

__all__ = _trade_exports + [
    "AwesomeAPIAutoCalculator",
    "AwesomeAPIAutoMetrics",
    "AwesomeAPIClient",
    "AwesomeAPIError",
    "AwesomeAPISnapshotBuilder",
    "AwesomeAlgoSyncEngine",
    "AwesomeAlgoSyncReport",
    "AwesomeAlgoSyncRequest",
    "AwesomeLLMInsights",
    "AccountSnapshot",
    "BackToBreakevenCalculator",
    "BreakevenPhase",
    "BreakevenPlan",
    "BreakevenRequest",
    "ElliottSwing",
    "ElliottWaveAnalyzer",
    "ElliottWaveReport",
    "MechanicalAnalysisCalculator",
    "MechanicalMetrics",
    "DexPoolSnapshot",
    "DexScannerAlgo",
    "DexScannerSignal",
    "build_scanner_for_tokens",
    "EconomicCatalyst",
    "EconomicCatalystGenerator",
    "EconomicCatalystSyncJob",
    "CorrelationSeries",
    "CurrencyCorrelationCalculator",
    "CurrencyCorrelationReport",
    "CurrencyCorrelationRequest",
    "AccountState",
    "LossRecoveryConfig",
    "LossRecoveryProgramme",
    "RecoveryPlan",
    "RecoveryStep",
    "MarketAdvisoryEngine",
    "MarketAdvisoryReport",
    "MarketAdvisoryRequest",
    "ObserverEvent",
    "OrchestrationBuilder",
    "OrchestrationContext",
    "OrchestrationError",
    "OrchestrationExecution",
    "OrchestrationObserver",
    "OrchestrationPlan",
    "OrchestrationStep",
    "DCTAllocationEngine",
    "DCTAllocationResult",
    "DCTAllocationRule",
    "DCTMarketSnapshot",
    "DCTMultiLLMOptimiser",
    "DCTPriceBreakdown",
    "DCTPriceCalculator",
    "DCTPriceInputs",
    "DCTProductionInputs",
    "DCTProductionPlan",
    "DCTProductionPlanner",
    "DCTLLMAdjustment",
    "DCTLLMOptimisationResult",
    "DCTSyncJob",
    "DESK_TOKEN_CHECKLIST_REFERENCE",
    "TokenHubDevelopmentContext",
    "TokenHubDevelopmentOrchestrator",
    "TokenHubSyncReport",
    "FAQEntry",
    "FAQRequest",
    "FAQSource",
    "TonkeeperAccountSnapshot",
    "TonkeeperLLMCoordinator",
    "TonkeeperLLMResolution",
    "TonkeeperNetworkStatus",
    "TonkeeperSyncContext",
    "TonkeeperSyncEngine",
    "TonkeeperSyncPlan",
    "ProjectFAQGenerator",
    "ProjectFAQPackage",
    "Route",
    "RouteKeeperAlgorithm",
    "RouteKeeperSyncResult",
    "StepExecution",
    "StepHandler",
    "StepResult",
    "StepStatus",
    "CEO_PLAYBOOK",
    "CFO_PLAYBOOK",
    "COO_PLAYBOOK",
    "EXECUTIVE_PLAYBOOKS",
    "build_executive_playbooks",
    "build_executive_sync_algorithm",
    "Element",
    "ElementProfile",
    "ElementSignal",
    "PsychologyTelemetry",
    "score_elements",
    "KillZone",
    "MVT_TIMEZONE",
    "TimeKeeperAlgorithm",
    "TimeKeeperSyncResult",
    "TradingSession",
    "VipAutoSyncJob",
    "VipAutoSyncReport",
    "VipMembershipProvider",
    "VipMembershipSnapshot",
    "VipTokenGrant",
    "VipTokenisationStrategy",
    "execute_plan",
]

globals().update({name: getattr(_trade_logic, name) for name in _trade_exports})
globals().update(
    {
        "AwesomeAPIAutoCalculator": AwesomeAPIAutoCalculator,
        "AwesomeAPIAutoMetrics": AwesomeAPIAutoMetrics,
        "AwesomeAPIClient": AwesomeAPIClient,
        "AwesomeAPIError": AwesomeAPIError,
        "AwesomeAPISnapshotBuilder": AwesomeAPISnapshotBuilder,
        "AwesomeAlgoSyncEngine": AwesomeAlgoSyncEngine,
        "AwesomeAlgoSyncReport": AwesomeAlgoSyncReport,
        "AwesomeAlgoSyncRequest": AwesomeAlgoSyncRequest,
        "AwesomeLLMInsights": AwesomeLLMInsights,
        "AccountSnapshot": AccountSnapshot,
        "BackToBreakevenCalculator": BackToBreakevenCalculator,
        "BreakevenPhase": BreakevenPhase,
        "BreakevenPlan": BreakevenPlan,
        "BreakevenRequest": BreakevenRequest,
        "ElliottSwing": ElliottSwing,
        "ElliottWaveAnalyzer": ElliottWaveAnalyzer,
        "ElliottWaveReport": ElliottWaveReport,
        "MechanicalAnalysisCalculator": MechanicalAnalysisCalculator,
        "MechanicalMetrics": MechanicalMetrics,
        "EconomicCatalyst": EconomicCatalyst,
        "EconomicCatalystGenerator": EconomicCatalystGenerator,
        "EconomicCatalystSyncJob": EconomicCatalystSyncJob,
        "DexPoolSnapshot": DexPoolSnapshot,
        "DexScannerAlgo": DexScannerAlgo,
        "DexScannerSignal": DexScannerSignal,
        "build_scanner_for_tokens": build_scanner_for_tokens,
        "CorrelationSeries": CorrelationSeries,
        "CurrencyCorrelationCalculator": CurrencyCorrelationCalculator,
        "CurrencyCorrelationReport": CurrencyCorrelationReport,
        "CurrencyCorrelationRequest": CurrencyCorrelationRequest,
        "AccountState": AccountState,
        "LossRecoveryConfig": LossRecoveryConfig,
        "LossRecoveryProgramme": LossRecoveryProgramme,
        "RecoveryPlan": RecoveryPlan,
        "RecoveryStep": RecoveryStep,
        "MarketAdvisoryEngine": MarketAdvisoryEngine,
        "MarketAdvisoryReport": MarketAdvisoryReport,
        "MarketAdvisoryRequest": MarketAdvisoryRequest,
        "ObserverEvent": ObserverEvent,
        "OrchestrationBuilder": OrchestrationBuilder,
        "OrchestrationContext": OrchestrationContext,
        "OrchestrationError": OrchestrationError,
        "OrchestrationExecution": OrchestrationExecution,
        "OrchestrationObserver": OrchestrationObserver,
        "OrchestrationPlan": OrchestrationPlan,
        "OrchestrationStep": OrchestrationStep,
        "DCTAllocationEngine": DCTAllocationEngine,
        "DCTAllocationResult": DCTAllocationResult,
        "DCTAllocationRule": DCTAllocationRule,
        "DCTMarketSnapshot": DCTMarketSnapshot,
        "DCTMultiLLMOptimiser": DCTMultiLLMOptimiser,
        "DCTPriceBreakdown": DCTPriceBreakdown,
        "DCTPriceCalculator": DCTPriceCalculator,
        "DCTPriceInputs": DCTPriceInputs,
        "DCTProductionInputs": DCTProductionInputs,
        "DCTProductionPlan": DCTProductionPlan,
        "DCTProductionPlanner": DCTProductionPlanner,
        "DCTLLMAdjustment": DCTLLMAdjustment,
        "DCTLLMOptimisationResult": DCTLLMOptimisationResult,
        "DCTSyncJob": DCTSyncJob,
        "DESK_TOKEN_CHECKLIST_REFERENCE": DESK_TOKEN_CHECKLIST_REFERENCE,
        "TokenHubDevelopmentContext": TokenHubDevelopmentContext,
        "TokenHubDevelopmentOrchestrator": TokenHubDevelopmentOrchestrator,
        "TokenHubSyncReport": TokenHubSyncReport,
        "VipAutoSyncJob": VipAutoSyncJob,
        "VipAutoSyncReport": VipAutoSyncReport,
        "VipMembershipProvider": VipMembershipProvider,
        "VipMembershipSnapshot": VipMembershipSnapshot,
        "VipTokenGrant": VipTokenGrant,
        "VipTokenisationStrategy": VipTokenisationStrategy,
        "FAQEntry": FAQEntry,
        "FAQRequest": FAQRequest,
        "FAQSource": FAQSource,
        "ProjectFAQGenerator": ProjectFAQGenerator,
        "ProjectFAQPackage": ProjectFAQPackage,
        "KillZone": KillZone,
        "MVT_TIMEZONE": MVT_TIMEZONE,
        "TimeKeeperAlgorithm": TimeKeeperAlgorithm,
        "TimeKeeperSyncResult": TimeKeeperSyncResult,
        "TradingSession": TradingSession,
        "CEO_PLAYBOOK": CEO_PLAYBOOK,
        "CFO_PLAYBOOK": CFO_PLAYBOOK,
        "COO_PLAYBOOK": COO_PLAYBOOK,
        "EXECUTIVE_PLAYBOOKS": EXECUTIVE_PLAYBOOKS,
        "build_executive_playbooks": build_executive_playbooks,
        "build_executive_sync_algorithm": build_executive_sync_algorithm,
        "Element": Element,
        "ElementProfile": ElementProfile,
        "ElementSignal": ElementSignal,
        "PsychologyTelemetry": PsychologyTelemetry,
        "score_elements": score_elements,
        "StepExecution": StepExecution,
        "StepHandler": StepHandler,
        "StepResult": StepResult,
        "StepStatus": StepStatus,
        "execute_plan": execute_plan,
    }
)
