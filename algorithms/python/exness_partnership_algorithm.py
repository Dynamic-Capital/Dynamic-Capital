"""Exness partnership orchestration algorithm.

This module converts the qualitative partnership guidance into a deterministic
plan that Dynamic Capital's automation stack can execute.  It sequences the
activities required to launch an Introducing Broker (IB) or white-label
relationship with Exness, ensuring compliance checkpoints, revenue enablement,
and trader activation all run through the same governance lens.
"""

from __future__ import annotations

from dataclasses import dataclass, field
from typing import Dict, List, Mapping, Sequence, Tuple

__all__ = [
    "PartnershipTask",
    "PartnershipPhase",
    "ExnessPartnershipPlan",
    "DynamicExnessPartnershipAlgorithm",
]


@dataclass(slots=True)
class PartnershipTask:
    """Discrete workflow item required to operationalise the partnership."""

    name: str
    description: str
    category: str
    outcomes: Sequence[str]
    dependencies: Tuple[str, ...] = ()
    deliverables: Tuple[str, ...] = ()
    owners: Tuple[str, ...] = ()

    def to_dict(self) -> Dict[str, object]:
        """Return a serialisable representation of the task."""

        return {
            "name": self.name,
            "description": self.description,
            "category": self.category,
            "outcomes": list(self.outcomes),
            "dependencies": list(self.dependencies),
            "deliverables": list(self.deliverables),
            "owners": list(self.owners),
        }


@dataclass(slots=True)
class PartnershipPhase:
    """Grouping of partnership tasks that deliver a strategic milestone."""

    name: str
    objective: str
    tasks: Tuple[PartnershipTask, ...] = ()

    def task_index(self) -> Dict[str, PartnershipTask]:
        """Return tasks indexed by their unique name."""

        return {task.name: task for task in self.tasks}

    def to_dict(self) -> Dict[str, object]:
        """Return a serialisable representation of the phase."""

        return {
            "name": self.name,
            "objective": self.objective,
            "tasks": [task.to_dict() for task in self.tasks],
        }


@dataclass(slots=True)
class ExnessPartnershipPlan:
    """Complete partnership execution plan generated by the algorithm."""

    ib_tracking_url: str
    phases: Tuple[PartnershipPhase, ...]
    revenue_model: Tuple[str, ...]
    activation_channels: Tuple[str, ...]
    compliance_requirements: Tuple[str, ...]
    metadata: Mapping[str, object] = field(default_factory=dict)

    def task_map(self) -> Dict[str, PartnershipTask]:
        """Return all tasks keyed by their unique name."""

        merged: Dict[str, PartnershipTask] = {}
        for phase in self.phases:
            for name, task in phase.task_index().items():
                if name in merged:
                    raise ValueError(f"duplicate task detected: {name}")
                merged[name] = task
        return merged

    def ordered_tasks(self) -> List[PartnershipTask]:
        """Return tasks ordered via dependency-aware topological sort."""

        tasks = self.task_map()
        dependency_graph: Dict[str, set[str]] = {
            name: set(task.dependencies) for name, task in tasks.items()
        }

        for name, deps in dependency_graph.items():
            unknown = deps.difference(tasks)
            if unknown:
                missing = ", ".join(sorted(unknown))
                raise KeyError(f"Task '{name}' references unknown dependency: {missing}")

        ordered: List[PartnershipTask] = []
        ready = sorted(name for name, deps in dependency_graph.items() if not deps)

        while ready:
            current = ready.pop(0)
            ordered.append(tasks[current])

            for successor, deps in dependency_graph.items():
                if current in deps:
                    deps.remove(current)
                    if not deps and successor not in [task.name for task in ordered] and successor not in ready:
                        ready.append(successor)
            ready.sort()

        if len(ordered) != len(tasks):
            unresolved = set(tasks).difference(task.name for task in ordered)
            missing = ", ".join(sorted(unresolved))
            raise ValueError(f"Cyclic dependency detected; unresolved tasks: {missing}")

        return ordered

    def to_dict(self) -> Dict[str, object]:
        """Return a serialisable representation of the partnership plan."""

        return {
            "ib_tracking_url": self.ib_tracking_url,
            "phases": [phase.to_dict() for phase in self.phases],
            "revenue_model": list(self.revenue_model),
            "activation_channels": list(self.activation_channels),
            "compliance_requirements": list(self.compliance_requirements),
            "metadata": dict(self.metadata),
            "ordered_tasks": [task.to_dict() for task in self.ordered_tasks()],
        }


class DynamicExnessPartnershipAlgorithm:
    """Construct a deterministic plan for executing the Exness partnership."""

    def __init__(
        self,
        *,
        ib_tracking_url: str,
        jurisdictions: Sequence[str],
        partner_brand: str = "Dynamic Capital",
        include_white_label: bool = True,
    ) -> None:
        if not ib_tracking_url:
            raise ValueError("ib_tracking_url must be provided")
        if not jurisdictions:
            raise ValueError("at least one jurisdiction must be provided")

        self._ib_tracking_url = ib_tracking_url
        self._jurisdictions = tuple(jurisdictions)
        self._partner_brand = partner_brand
        self._include_white_label = include_white_label

    def build(self) -> ExnessPartnershipPlan:
        """Return the structured plan that sequences partnership execution."""

        discovery_phase = PartnershipPhase(
            name="Discovery",
            objective="Validate the commercial fit and establish a partner point-of-contact",
            tasks=(
                PartnershipTask(
                    name="research-exness-offering",
                    description="Review Exness IB and white-label programmes, fee schedules, and regional support coverage.",
                    category="due-diligence",
                    outcomes=(
                        "Document partner incentives and operational expectations",
                        "Identify integration and reporting touchpoints",
                    ),
                    deliverables=("partner_dossier", "programme_comparison_matrix"),
                    owners=("Growth", "Partnerships"),
                ),
                PartnershipTask(
                    name="contact-exness-partnership-team",
                    description="Initiate dialogue with Exness partnerships to confirm onboarding requirements and timelines.",
                    category="partner-management",
                    outcomes=(
                        "Secure partnership manager contact",
                        "Schedule onboarding and technical enablement sessions",
                    ),
                    dependencies=("research-exness-offering",),
                    deliverables=("intro_call_notes", "mutual_nda_status"),
                    owners=("Partnerships",),
                ),
            ),
        )

        model_phase_tasks: List[PartnershipTask] = [
            PartnershipTask(
                name="assess-ib-model-fit",
                description="Model commission, rebate, and support workload for an IB integration tied to the Dynamic Capital funnel.",
                category="commercial-design",
                outcomes=(
                    "Quantify expected trading volume per cohort",
                    "Define client success and escalation pathways",
                ),
                dependencies=("contact-exness-partnership-team",),
                deliverables=("ib_financial_model", "support_playbook"),
                owners=("Growth", "Finance", "Success"),
            )
        ]

        if self._include_white_label:
            model_phase_tasks.append(
                PartnershipTask(
                    name="assess-white-label-model",
                    description="Evaluate white-label responsibilities including branding, platform hosting, and client servicing.",
                    category="commercial-design",
                    outcomes=(
                        "Clarify operating costs and SLA commitments",
                        "Determine go-live sequencing relative to IB rollout",
                    ),
                    dependencies=("contact-exness-partnership-team",),
                    deliverables=("white_label_cost_model", "sla_summary"),
                    owners=("Product", "Operations", "Finance"),
                )
            )

        model_phase_tasks.append(
            PartnershipTask(
                name="select-primary-operating-model",
                description="Choose the initial partnership track and define contingency activation criteria for the alternate model.",
                category="commercial-design",
                outcomes=(
                    "Executive approval of partnership scope",
                    "Documented trigger points to expand into additional models",
                ),
                dependencies=tuple(task.name for task in model_phase_tasks),
                deliverables=("partnership_decision_memo", "implementation_brief"),
                owners=("Executive", "Operations"),
            )
        )

        model_phase = PartnershipPhase(
            name="Model Design",
            objective="Select the commercial and operational approach that maximises partner ROI.",
            tasks=tuple(model_phase_tasks),
        )

        compliance_phase = PartnershipPhase(
            name="Compliance",
            objective="Satisfy regulatory obligations across target jurisdictions before launch.",
            tasks=(
                PartnershipTask(
                    name="engage-legal-review",
                    description="Engage legal counsel to validate Maldivian and partner jurisdiction requirements for the chosen model.",
                    category="compliance",
                    outcomes=(
                        "Gap analysis covering licensing, disclosures, and onboarding controls",
                        "Legal sign-off on marketing language and client agreements",
                    ),
                    dependencies=("select-primary-operating-model",),
                    deliverables=("compliance_gap_analysis", "approved_messaging_guide"),
                    owners=("Legal", "Compliance"),
                ),
                PartnershipTask(
                    name="draft-contracting-and-ndas",
                    description="Author partnership, referral, and data processing agreements aligned with Exness requirements.",
                    category="legal",
                    outcomes=(
                        "Executed partnership agreements",
                        "Repository of signed NDAs and contractual obligations",
                    ),
                    dependencies=("engage-legal-review",),
                    deliverables=("executed_contracts", "obligation_register"),
                    owners=("Legal", "Partnerships"),
                ),
                PartnershipTask(
                    name="configure-regulatory-controls",
                    description="Update onboarding flows with jurisdiction-specific disclosures, KYC checkpoints, and reporting hooks.",
                    category="compliance",
                    outcomes=(
                        "Supabase policy mapping for jurisdictional requirements",
                        "Automated reporting schedules for regulators",
                    ),
                    dependencies=("engage-legal-review",),
                    deliverables=("kyc_control_matrix", "regulatory_reporting_calendar"),
                    owners=("Compliance", "Engineering"),
                ),
            ),
        )

        integration_phase = PartnershipPhase(
            name="Integration",
            objective="Embed Exness incentives, tracking, and messaging into the Dynamic Capital stack.",
            tasks=(
                PartnershipTask(
                    name="align-offers-with-stack",
                    description="Map Exness IB incentives to referral links, promo codes, and analytics tables across the platform.",
                    category="integration",
                    outcomes=(
                        "Referral deep links paired with Exness tracking parameters",
                        "Promo catalogue entries with Exness-specific benefits",
                    ),
                    dependencies=("select-primary-operating-model",),
                    deliverables=("referral_link_matrix", "promo_campaign_records"),
                    owners=("Engineering", "Growth"),
                ),
                PartnershipTask(
                    name="configure-analytics-and-sla-monitoring",
                    description="Ensure conversion tracking, deposit telemetry, and SLA dashboards capture Exness partner performance.",
                    category="integration",
                    outcomes=(
                        "Unified analytics dashboards for partner funnels",
                        "Alerting on commission, spreads, and deposit rebate targets",
                    ),
                    dependencies=("align-offers-with-stack",),
                    deliverables=("analytics_dashboard_specs", "sla_alerting_rules"),
                    owners=("Data", "Operations"),
                ),
                PartnershipTask(
                    name="publish-shared-messaging-assets",
                    description="Update Telegram, mini-app, and marketing site content keys with Exness positioning and CTAs.",
                    category="enablement",
                    outcomes=(
                        "Approved partner messaging distributed across channels",
                        "Content calendar for co-branded announcements",
                    ),
                    dependencies=("configure-analytics-and-sla-monitoring", "draft-contracting-and-ndas"),
                    deliverables=("content_batch_updates", "go_to_market_calendar"),
                    owners=("Marketing", "Growth"),
                ),
            ),
        )

        activation_phase = PartnershipPhase(
            name="Activation",
            objective="Launch education, community, and value-added services that drive trader adoption.",
            tasks=(
                PartnershipTask(
                    name="launch-education-programming",
                    description="Produce webinars, workshops, and mentorship assets introducing Exness tools and Dynamic Capital workflows.",
                    category="growth",
                    outcomes=(
                        "Segmented education track for new traders",
                        "Feedback loop into broadcast automations",
                    ),
                    dependencies=("publish-shared-messaging-assets",),
                    deliverables=("education_curriculum", "broadcast_series_plan"),
                    owners=("Growth", "Success"),
                ),
                PartnershipTask(
                    name="scale-community-engagement",
                    description="Organise community events, office hours, and discussion forums that reinforce partner value.",
                    category="growth",
                    outcomes=(
                        "Active community cadence with attendance targets",
                        "Partner spotlight segments embedded in community schedule",
                    ),
                    dependencies=("launch-education-programming",),
                    deliverables=("community_events_calendar", "engagement_reports"),
                    owners=("Community", "Success"),
                ),
                PartnershipTask(
                    name="deploy-value-added-services",
                    description="Ship exclusive signals, risk management tools, and market insights bundled with Exness onboarding.",
                    category="product",
                    outcomes=(
                        "Premium research templates aligned with Exness asset classes",
                        "Automation hooks that trigger partner-specific nudges",
                    ),
                    dependencies=("scale-community-engagement",),
                    deliverables=("signal_catalogue", "risk_toolkit_release_notes"),
                    owners=("Product", "Research", "Engineering"),
                ),
            ),
        )

        revenue_model = (
            "IB commissions indexed to referred client trading volume",
            "Customisable spread markups for white-label deployments",
            "Deposit rebate sharing with transparent ledgering",
        )

        activation_channels = (
            "Telegram bot broadcasts and referral deep links",
            "Mini-app paywall and promo journeys",
            "Marketing site CTAs and educational landing pages",
        )

        compliance_requirements = tuple(
            f"Maintain regulatory compliance for {jurisdiction} with documented audits" for jurisdiction in self._jurisdictions
        )

        metadata = {
            "partner_brand": self._partner_brand,
            "jurisdictions": list(self._jurisdictions),
            "white_label_considered": self._include_white_label,
        }

        return ExnessPartnershipPlan(
            ib_tracking_url=self._ib_tracking_url,
            phases=(
                discovery_phase,
                model_phase,
                compliance_phase,
                integration_phase,
                activation_phase,
            ),
            revenue_model=revenue_model,
            activation_channels=activation_channels,
            compliance_requirements=compliance_requirements,
            metadata=metadata,
        )
