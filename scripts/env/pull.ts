import { promises as fs } from 'fs';
import path from 'path';
import { readEnvMap, repoRoot } from './utils.ts';
const outputPath = path.join(repoRoot, 'env', '.env.local');

async function main() {
  const envMap = await readEnvMap();
  const seen = new Set<string>();
  const present: string[] = [];
  const missing: string[] = [];

  for (const variables of Object.values(envMap)) {
    for (const variable of variables) {
      if (seen.has(variable)) continue;
      seen.add(variable);
      if (process.env[variable] && `${process.env[variable]}`.trim()) {
        present.push(variable);
      } else {
        missing.push(variable);
      }
    }
  }

  const lines = [
    '# Redacted snapshot generated by scripts/env/pull.ts',
    '# Values are replaced with REDACTED to avoid leaking secrets.',
    ''
  ];

  for (const variable of Array.from(seen).sort()) {
    if (present.includes(variable)) {
      lines.push(`${variable}=REDACTED`);
    } else {
      lines.push(`# ${variable}=`);
    }
  }

  await fs.writeFile(outputPath, `${lines.join('\n')}\n`, 'utf8');

  console.log(`Wrote ${outputPath}`);
  console.log(`  present: ${present.length}`);
  console.log(`  missing: ${missing.length}`);
}

await main();
