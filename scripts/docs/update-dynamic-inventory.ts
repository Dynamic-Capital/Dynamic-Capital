import { readdir, writeFile } from "node:fs/promises";
import { resolve } from "node:path";

const DOC_PATH = resolve("docs/dynamic_inventory.md");
const ROOT_PATH = resolve(".");

async function listDynamicDirectories(root: string): Promise<string[]> {
  const entries = await readdir(root, { withFileTypes: true });
  return entries
    .filter((entry) => entry.isDirectory() && entry.name.startsWith("dynamic_"))
    .map((entry) => entry.name)
    .sort((a, b) => a.localeCompare(b));
}

function renderMarkdown(directories: string[]): string {
  const isoDate = new Date().toISOString().slice(0, 10);
  const header =
    `<!-- AUTOGENERATED: scripts/docs/update-dynamic-inventory.ts -->\n# Dynamic Inventory Directory List\n\n_Last updated: ${isoDate} (UTC)_\n\nThis reference enumerates top-level directories in the repository that begin with the \`dynamic_\` prefix. Use it as a quick inventory when exploring the experimental modules that complement the core Dynamic Capital application.\n\n## Index of \`dynamic_\` directories\n`;

  const list = directories.map((dir) => `- \`${dir}\``).join("\n");
  const footer =
    `\n\nFor more comprehensive repository context, review [\`docs/REPO_INVENTORY.md\`](./REPO_INVENTORY.md), which links each major surface to its corresponding documentation and code references.\n`;

  return `${header}${
    directories.length
      ? `\n${list}`
      : "\n_There are currently no dynamic directories._"
  }${footer}`;
}

async function main(): Promise<void> {
  const directories = await listDynamicDirectories(ROOT_PATH);
  const markdown = renderMarkdown(directories);
  await writeFile(DOC_PATH, `${markdown}`);
  console.log(`Updated dynamic inventory with ${directories.length} entries.`);
}

main().catch((error) => {
  console.error("Failed to update dynamic inventory");
  console.error(error);
  process.exitCode = 1;
});
